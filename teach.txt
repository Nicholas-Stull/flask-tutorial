DB 101 - DBMS

Schema
Todo Class
User Class


Table Definition - DDL

Create table IF NOT EXISTS todo COLUMNS id integer, title varchar(100), 

| id | title | date | user |
|----|-------|------| ---- |
|  1  |       |      |  1
|  2  |       |      |  2
|  3  |       |      |  3
|  4  |       |      |  1

Update table - add description ALTER
Delete 
Change datatype

Create table user COLUMNS id integer, username varchar(100), 

| id | username | email |
|----|-------|------|
|  1  |   bhavani    |      |
|  2  |    pritwish   |      |
|  3  |       |      |

Primary key
Forigen key 

Sqlite - todo.db
Postgres - postgres://host:username@passowrd/dbname
Mysql - 

Table Data - DQL 

List -  Particular item - select * from tablename where is_deleted=False
Update - update table tablename where is_deleted=False values ()
Insert - INsert into table id=5, title="new entry"
Delete - DELETE FROm table where id=1



Flask 101 - Adv programming

app =  Flask()
@app.route()
app.run

POST - Create an entry
PUT - Update an entry
DELETE - Delete an entry
GET - /todo/{id} - particular item
/todo - all the items
 
Request
Response


            Flask your code DB code
Browser ----> Server(Python) -------> DB
Terminal(requests)

Request = endpoint - /todo POST
        = headers - Authorization 
        = data - {"title": "attend coworking session"}

Response = endpoint /todo POST
        = headers {}
        = response data {"id" : 1, "status" : "success", "message" : "new entry created"}
        = response code - 200, 404, 500 

urllib3
requests  -------> Flask - Server


----

Library - requests

todo.py

import Library
--
--
--
library.use()
--
--
---


Framework - Flask

Sandwich

from flask import request, response 

app =  Flask()

reading the headers
Getting the data

@app.route("/todo", methods=["POST"])
def create_todo():
    request.
    return {"id": 1}, 500

app.run()

---


In [6]: class Schema:
   ...:     def temp(self, num):
   ...:         print (self, num)
   ...: 

In [7]: class Schema:
   ...:     def temp(self, num):
   ...:         print (self, num)
   ...: 

In [8]: class Schema:
   ...:     def temp(self, num):
   ...:         print (self, num)
   ...:     def tl(self):
   ...:         pass
   ...: 

In [9]: Schema.tl()
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-9-ff045e3f4765> in <module>
----> 1 Schema.tl()

TypeError: tl() missing 1 required positional argument: 'self'

In [10]: obj = Schema()

In [11]: obj.tl()

In [12]: Schema.tl(obj)

In [13]: Schema.temp(obj, 1)
<__main__.Schema object at 0x10415a880> 1

In [14]: obj.temp(1)
<__main__.Schema object at 0x10415a880> 1
